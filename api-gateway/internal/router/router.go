package router

import (
	"net/http" // Added import for http status codes
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/zhandarbeks/petstore-final-project/api-gateway/internal/handler" // Adjust import path

	// For Swagger (if you integrate it later)
	// swaggerFiles "github.com/swaggo/files"
	// ginSwagger "github.com/swaggo/gin-swagger"
	// _ "github.com/zhandarbeks/petstore-final-project/api-gateway/docs" // docs is generated by Swag CLI
)

// New creates and configures a new Gin router.
// It takes the handlers for user, pet, and adoption services as dependencies.
func New(
	userHandler *handler.UserHandler,
	petHandler *handler.PetHandler,
	adoptionHandler *handler.AdoptionHandler,
	// authMiddleware gin.HandlerFunc, // Placeholder for your auth middleware
) *gin.Engine {
	router := gin.New() // Create a new Gin engine without default middleware

	// --- Global Middleware ---
	// Logger middleware will write the logs to gin.DefaultWriter even if you run with "release" mode.
	router.Use(gin.Logger())
	// Recovery middleware recovers from any panics and writes a 500 if there was one.
	router.Use(gin.Recovery())
	// CORS middleware
	router.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"}, // Allow all origins for simplicity, restrict in production
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	// --- Swagger Documentation Route (if you integrate Swag) ---
	// router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	// Example: http://localhost:8080/swagger/index.html

	// --- API Versioning (Optional but good practice) ---
	apiV1 := router.Group("/api/v1")
	{
		// --- User Routes ---
		users := apiV1.Group("/users")
		{
			users.POST("/register", userHandler.RegisterUser)
			users.POST("/login", userHandler.LoginUser)

			// Routes that might require authentication
			// authRequiredUsers := users.Group("/")
			// authRequiredUsers.Use(authMiddleware) // Apply auth middleware
			// {
			// 	authRequiredUsers.GET("/:userId", userHandler.GetUser)
			// 	authRequiredUsers.PATCH("/:userId", userHandler.UpdateUserProfile)
			// 	authRequiredUsers.DELETE("/:userId", userHandler.DeleteUser)
			// 	authRequiredUsers.GET("/:userId/adoptions", adoptionHandler.ListUserAdoptionApplications) // Moved here as it's user-specific
			// }
			// For now, without auth middleware for simplicity in initial setup:
			users.GET("/:userId", userHandler.GetUser)
			users.PATCH("/:userId", userHandler.UpdateUserProfile)
			users.DELETE("/:userId", userHandler.DeleteUser)
			users.GET("/:userId/adoptions", adoptionHandler.ListUserAdoptionApplications)
		}

		// --- Pet Routes ---
		pets := apiV1.Group("/pets")
		{
			pets.GET("", petHandler.ListPets)       // List all pets (public)
			pets.GET("/:petId", petHandler.GetPet) // Get a specific pet (public)

			// Routes that might require authentication (e.g., for creating/modifying pets)
			// authRequiredPets := pets.Group("/")
			// authRequiredPets.Use(authMiddleware)
			// {
			// 	authRequiredPets.POST("", petHandler.CreatePet)
			// 	authRequiredPets.PATCH("/:petId", petHandler.UpdatePet)
			// 	authRequiredPets.DELETE("/:petId", petHandler.DeletePet)
			// 	authRequiredPets.PATCH("/:petId/status", petHandler.UpdatePetAdoptionStatus) // Admin or specific role
			// }
			// For now, without auth middleware:
			pets.POST("", petHandler.CreatePet)
			pets.PATCH("/:petId", petHandler.UpdatePet)
			pets.DELETE("/:petId", petHandler.DeletePet)
			pets.PATCH("/:petId/status", petHandler.UpdatePetAdoptionStatus)
		}

		// --- Adoption Routes ---
		adoptions := apiV1.Group("/adoptions")
		// authRequiredAdoptions := adoptions.Group("/")
		// authRequiredAdoptions.Use(authMiddleware)
		// {
		// 	authRequiredAdoptions.POST("", adoptionHandler.CreateAdoptionApplication)
		// 	authRequiredAdoptions.GET("/:applicationId", adoptionHandler.GetAdoptionApplication)
		// 	authRequiredAdoptions.PATCH("/:applicationId/status", adoptionHandler.UpdateAdoptionApplicationStatus) // Typically admin
		// }
		// For now, without auth middleware:
		{
			adoptions.POST("", adoptionHandler.CreateAdoptionApplication)
			adoptions.GET("/:applicationId", adoptionHandler.GetAdoptionApplication)
			adoptions.PATCH("/:applicationId/status", adoptionHandler.UpdateAdoptionApplicationStatus)
		}
	}

	// Health Check Endpoint (optional, but good for orchestrators)
	router.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"status": "UP"}) // http.StatusOK was undefined
	})

	return router
}